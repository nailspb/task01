openapi: 3.0.0
info:
  title: API
  version: 1.0.0
tags:
  - name: tasks
    description: Simple TODO service
  - name: users
    description: Simple users management service
paths:
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - tasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      tags:
        - tasks
      requestBody:
        description: The task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskAdd'
      responses:
        '201':
          description: Task added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /userTasks/{id}:
    get:
      summary: Get all tasks for user
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: A list of tasks for user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /tasks/{id}:
    get:
      summary: Get task by id
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          description: ID of task
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: A task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
    patch:
      summary: Update task by id
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          description: ID of task
          required: true
          schema:
            type: integer
            format: uint
      requestBody:
        description: The task to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskAdd'
      responses:
        '200':
          description: The task updated
        '404':
          description: Task not found
    delete:
      summary: Delete task by id
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          description: ID of task
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: The task is deleted
        '404':
          description: Task not found
  /users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        '200':
          description: a list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Add new user
      tags:
        - users
      requestBody:
        description: user to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAdd'
      responses:
        '201':
          description: user added to storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Get user by id
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: a user model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    patch:
      summary: Update user by id
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: uint
      requestBody:
        description: The user model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: The user updated
        '404':
          description: User not found
    delete:
      summary: Delete user by id
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
            format: uint
      responses:
        '200':
          description: The user is deleted
        '404':
          description: User not found

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: uint
        task:
          type: string
        is_done:
          type: boolean
        user_id:
          type: integer
          format: uint
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    TaskAdd:
      type: object
      required:
        - user_id
      properties:
        task:
          type: string
        user_id:
          type: integer
          format: uint
        is_done:
          type: boolean

    UserAdd:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    UserUpdate:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
        email:
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time